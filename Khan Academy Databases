--What are average, max, and min values in the data?
SELECT AVG(height_m) FROM marvels;
SELECT MAX(strength) FROM marvels; 
SELECT MIN(speed) FROM marvels;

--What about those numbers per category in the data?
SELECT name, AVG(height_m) as tallest_marvels
FROM marvels 
GROUP BY height_m 
HAVING SUM (height_m) > 1.7;

SELECT name, MAX(strength) as strongest_marvels
FROM marvels 
GROUP BY strength 
HAVING SUM (strength) >= 5;

SELECT MIN(speed) as fastest_marvels
FROM marvels
GROUP BY speed 
HAVING SUM (speed) >= 3;




--Display the database ordered by song titles by Queen.     
SELECT title 
FROM songs 
WHERE artist = 'Queen';

--Display the database ordered by names of all of the artists from the 'Pop' genre.
SELECT name 
FROM artists 
WHERE genre = 'Pop';

--Display the database ordered by the song titles from the 'Pop' artists. 



--Display a table showing people's names with their hobbies.    
SELECT p.fullname, h.name
FROM persons p
JOIN hobbies h
ON p.id = h.person_id;

--Display a table showing the names of each pair of friends, based on the data in the friends table.
SELECT a.fullname, b.fullname
FROM friends 
JOIN persons a
ON a.id = friends.person1_id
JOIN persons b
ON b.id = friends.person2_id;    

SELECT title 
FROM songs
WHERE artist 
IN ("Taylor Swift", "Celine Dion", "Rihanna", "Gloria Stefan");




--Display the database ordered by authors who have written more than 1 million words.  
SELECT author, SUM(words) as total_words
FROM books 
GROUP BY author
HAVING total_words > 1000000;

--Display the database ordered by authors that write more than an average of 150,000 words per book. 
SELECT author, AVG(words) as avg_words
FROM books 
GROUP BY author
HAVING avg_words >=150000;




--Display the database ordered by songs that are "epic" or released after 1990. 

SELECT title
FROM songs
WHERE mood = "epic" 
OR released > 1990;

--Display the database ordered by songs that are "epic" and released after 1990 and 4 minutes or less. 

SELECT title 
FROM songs
WHERE mood = "epic"
AND released > 1990 
AND duration < 240;




--Insert one more row in persons and then one more row in hobbies that is related to the newly inserted person.
INSERT INTO persons (name, age)
VALUES ('Eugenia', 25);
INSERT INTO hobbies (person_id, name)
VALUES (5, "painting");


--Select the 2 tables with a join so that you can see each person's name next to their hobby.
SELECT p.name, h.name 
FROM persons p 
JOIN hobbies h
ON p.id = h.person_id;

--Add an additional query that shows only the name and hobbies of 'Bobby McBobbyFace'. 
SELECT p.name, h.name as hobby
FROM persons p
JOIN hobbies h 
ON p.id = h.person_id
WHERE p.name = 'Bobby McBobbyFace'; 




--Display the table showing the title of each movie next to its sequel's title. 
SELECT movies.title, sequels.title as sequel
FROM movies 
LEFT OUTER JOIN movies sequels
ON movies.sequel_id = sequels.id;




--Create a table that lists the name and email of every customer followed by the item and price of orders they've made.
SELECT customers.name, customers.email, orders.item, orders.price 
FROM customers
LEFT OUTER JOIN orders
ON customers.id = orders.customer_id;

--Create table with one row per each customer including their name, email, and total amount of money spent. Sort by most spent to the least spent.
SELECT customers.name, customers.email, SUM(orders.price) as spent
FROM customers 
LEFT OUTER JOIN orders
ON customers.id = orders.customer_id
GROUP BY name
ORDER BY spent DESC;




 --Display the database by display the name, number_grade, and percent_completed.
SELECT name, number_grade, ROUND (fraction_completed *100) 
AS percent_completed
FROM student_grades; 

--Display the database showing how many students have earned which letter_grade. Then show the number of students with each of those grades.
SELECT COUNT (*),    
CASE WHEN number_grade > 90 THEN "A" 
     WHEN number_grade > 80 THEN "B" 
     WHEN number_grade > 70 THEN "C" 
     ELSE "F"
     END as "letter_grade"
     FROM student_grades
     GROUP BY letter_grade;
